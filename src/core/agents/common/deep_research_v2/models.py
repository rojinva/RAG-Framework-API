import operator
from typing import Annotated, Optional, List
from pydantic import BaseModel, Field, root_validator

from langgraph.graph import MessagesState
from langchain_core.tools import BaseTool

from src.models.deep_research import DeepResearchConfig

class DeepResearchLanggraphConfig(DeepResearchConfig):
    """The configurable fields for the graph."""

    tools: Optional[List[BaseTool]] = Field(
        None, description="List of tools available for the deep research graph."
    )

class ResearchSection(BaseModel):
    title: str = Field(
        description="A concise headline representing the topic or focus of the research section."
    )
    description: str = Field(
        description="A detailed explanation of what the research section will address, providing context and background."
    )
    query: str = Field(
        description=(
            "A well-articulated question that outlines the specific inquiry for this research section. "
            "It should mirror the user's question and include multiple bullet points that thoroughly explain the topics to be covered."
        )
    )
    reasoning: str = Field(
        description=(
            "A rationale that explains the selection and relevance of this research section. "
            "It should describe how the section fits into the overall research framework and why it is important."
        )
    )
    acceptance_criteria: str = Field(
        description=(
            "A checklist of key points or outcomes that the research section must achieve in order to be considered complete. "
            "This serves as the evaluation criteria for the research thoroughness and accuracy."
        )
    )

class ResearchPlan(BaseModel):
    description: str = Field(
        description="A comprehensive overview of the research scope, outlining the general objectives and boundaries for the study."
    )
    sections: List[ResearchSection] = Field(
        description=("A list of distinct research sections that need to be addressed."),
    )

    _min_length: int = 2
    _max_length: int = 5

    @root_validator(pre=True)
    def validate_sections_length(cls, values):
        sections = values.get("sections", [])
        min_length = cls._min_length
        max_length = cls._max_length

        if not (min_length <= len(sections) <= max_length):
            raise ValueError(
                f"Sections must have between {min_length} and {max_length} items."
            )
        return values

    @classmethod
    def configure_length(cls, min_length: int, max_length: int):
        """
        Configure the minimum and maximum length for the sections field.
        """
        cls._min_length = min_length
        cls._max_length = max_length


class DraftSection(BaseModel):
    title: str = Field(description="A clear and descriptive title for the draft section.")
    content: str = Field(
        description="Preliminary draft created by the agent. This has been evaluated by the grader and meets the acceptance criteria."
    )


class Review(BaseModel):
    passed: bool = Field(
        description="A flag indicating whether the research validation has been successful (True) or not (False)."
    )
    feedback: str = Field(
        description="Detailed commentary and suggestions regarding the validation outcome. This provides guidance on necessary improvements or changes."
    )


class ResearcherScratchpad(BaseModel):
    section: ResearchSection = Field(
        description="The individual research section currently under investigation. This includes all relevant details driving the research process."
    )
    local_messages: Annotated[list, operator.add] = Field(
        default=None,
        description=(
            "A chronological record of the interactions between the researcher and grader. "
            "It begins with the user's query (section.query) and includes subsequent exchanges that refine the research."
        ),
    )
    revision_count: int = Field(
        default=0,
        description=(
            "A counter tracking the number of revisions made to the draft section. "
        ),
    )
    draft: DraftSection = Field(
        default=None,
        description="The primary draft content created by the researcher for the current section, serving as the initial output of the research process and will be evaluated by the grader.",
    )
    draft_sections: Annotated[list, operator.add] = Field(
        default=None,
        description="A collection of all draft outputs generated by the researcher, maintained for further review and integration into the overall research report. This is a shared state between the section researcher and ovreall research.",
    )


class Research(MessagesState):
    plan: ResearchPlan = Field(
        description="The comprehensive roadmap outlining the entire research process, including the scope and structure of the investigation."
    )
    draft_sections: Annotated[list, operator.add] = Field(
        description="A list of all draft sections produced throughout the research process, capturing the incremental development of the final report."
    )


class FinalAnswer(BaseModel):
    final_answer: str = Field(
        description="The conclusive output of the research process, summarizing all findings and providing a definitive answer as derived from the research and refinements."
    )