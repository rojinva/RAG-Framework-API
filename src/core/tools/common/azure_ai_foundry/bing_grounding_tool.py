import os

from pydantic import BaseModel
from typing import Type
from dotenv import load_dotenv

load_dotenv(override=True)

from azure.ai.agents import AgentsClient
from azure.ai.agents.models import (
    MessageRole,
    BingGroundingTool as AzureBingGroundingTool,
)
from src.clients import LifespanClients
from src.models.azure_ai_foundry_agent_tool import (
    AIFoundryAgentInput,
    BingAzureAIFoundryAgentToolSpec,
)
from src.core.tools.common.azure_ai_foundry.azure_ai_foundry_tool import (
    AzureAIFoundryTool,
)
from src.models.intermediate_step import IntermediateStep


class BingGroundingTool(AzureAIFoundryTool):
    """
    LamBot wrapper for the Bing Custom Search tool in Azure AI Foundry Agent.
    """

    args_schema: Type[BaseModel] = AIFoundryAgentInput
    tool_spec: BingAzureAIFoundryAgentToolSpec
    agent_client: AgentsClient = None
    created_fallback_agent: bool = False

    def __init__(self, tool_spec: BingAzureAIFoundryAgentToolSpec):
        super().__init__(tool_spec=tool_spec)
        self.agent_client = (
            LifespanClients.get_instance().azure_ai_foundry_agent.agent_client
        )
        self.created_fallback_agent = False

    def _configure_tool(self):
        tool = AzureBingGroundingTool(
            connection_id=os.getenv("BING_GROUNDING_TOOL_CONNECTION_ID"),
            count=self.tool_spec.tool_args.count,
            market=self.tool_spec.tool_args.market,
            set_lang=self.tool_spec.tool_args.set_lang,
            freshness=(
                self.tool_spec.tool_args.freshness
                if self.tool_spec.tool_args.freshness
                else ""
            ),
        )
        return tool.definitions

    @classmethod
    def from_tool_spec(cls, spec: BingAzureAIFoundryAgentToolSpec):
        return cls(tool_spec=spec)

    def _dispatch_initial_intermediate_step(self, query: AIFoundryAgentInput):
        self.dispatch_intermediate_step(
            intermediate_step=IntermediateStep(
                message=f'Searching the web using query: \"{query}\"'
            )
        )

    def _execute(self, query_str: str) -> str:
        """
        Executes the Bing search tool query and replaces citation placeholders
        with title and URL markdown.
        """
        # Call the base class's `_execute` method to get the raw answer
        answer, thread_id = super()._execute(query_str)

        # Retrieve the Agent's response message with citation annotations
        response_message = self.agent_client.messages.get_last_message_by_role(
            thread_id=thread_id, role=MessageRole.AGENT
        )

        if response_message and response_message.url_citation_annotations:
            # Replace citation placeholders with title and URL markdown
            for annotation in response_message.url_citation_annotations:
                citation_text = annotation.text  # e.g., "【3:0†source】"
                markdown = f"[{annotation.url_citation.title}]({annotation.url_citation.url})"
                answer = answer.replace(citation_text, f" {markdown} ")

        INSTRUCTION_PROMPT = "The following answer was generated by an agent with access to a web search tool. It contains in-text URL citations for reference. Please ensure to include these in-text url citations in the final answer.\n\n"

        return INSTRUCTION_PROMPT + answer
